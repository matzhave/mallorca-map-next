# Cursor AI Rules für Mallorca Map Monorepo

## 🔴 KRITISCH: Entwicklungs-Prinzipien (ABSOLUT BINDEND!)

> **Diese Regeln haben HÖCHSTE PRIORITÄT. Sie überschreiben alle anderen Überlegungen.**

### ⚠️ NIEMALS Kompromisse eingehen!

❌ **VERBOTEN:**
- Pfusch-Lösungen, Workarounds, Quick Fixes
- Abkürzungen die später Probleme verursachen
- "Funktioniert erstmal" ohne langfristig zu denken
- Technische Schulden für Geschwindigkeit

✅ **PFLICHT:**
- **Immer** die professionelle, skalierbare Lösung wählen
- **Immer** State-of-the-Art Best Practices folgen
- **Immer** Probleme an der Root Cause lösen, nicht umgehen
- **Immer** langfristig denken (10+ Jahre Projekt-Lebensdauer)

### 📖 Beispiel aus diesem Projekt:

**Problem:** PostGIS Extension `geography` Type nicht gefunden

❌ **FALSCH:** Einfach `latitude`/`longitude` Spalten nutzen (funktioniert, aber nicht optimal für Geo-Queries)

✅ **RICHTIG:** PostGIS korrekt konfigurieren:
1. Extension im `extensions` Schema aktivieren
2. `search_path` setzen damit Types gefunden werden
3. `gen_random_uuid()` statt `uuid_generate_v4()` nutzen (Postgres built-in)
4. Dokumentieren warum und wie

**Ergebnis:** Optimale Performance für Nearby-Queries, ST_Distance, Spatial Indexes

---

**📚 Vollständige Prinzipien:** Siehe `DEVELOPMENT_PRINCIPLES.md`

---

## 🎯 Projekt-Kontext

**Name:** Mallorca Map Next  
**Typ:** Full-Stack Monorepo mit Web + Mobile  
**Package Manager:** Bun 1.1.40+  
**Node Version:** >=20.0.0  
**Build Tool:** Turborepo 2.3.3+

---

## 📁 Monorepo-Struktur

```
mallorca-map-next/
├── apps/
│   ├── web/                    # 🌐 Next.js 15 Web App (SSR/ISR)
│   │   ├── src/
│   │   │   ├── app/            # App Router mit [lang] Dynamic Routing
│   │   │   ├── components/     # React Components (shadcn/ui)
│   │   │   ├── lib/            # Utilities (utils.ts)
│   │   │   ├── i18n.ts         # Internationalisierung
│   │   │   ├── globals.css     # Global Tailwind Styles
│   │   │   └── public/         # Static Assets + robots.txt
│   │   ├── next.config.mjs     # Next.js Config
│   │   ├── tailwind.config.ts  # Tailwind Setup mit shadcn/ui
│   │   ├── postcss.config.js   # PostCSS Config
│   │   ├── tsconfig.json       # TS Config
│   │   └── package.json
│   │
│   └── mobile/                 # 📱 React Native Expo App
│       ├── app/                # Expo Router (Native Stack)
│       ├── components/         # Native Components
│       ├── assets/             # Images, Fonts
│       ├── tailwind.config.js  # NativeWind Config
│       ├── babel.config.js     # Metro Bundler Config
│       ├── app.json            # Expo Config
│       └── package.json
│
├── packages/
│   ├── shared/                 # 📦 Shared Utilities
│   │   ├── src/
│   │   │   ├── i18n/           # Translations (de.json, en.json, es.json)
│   │   │   ├── utils/          # date.ts, string.ts
│   │   │   └── index.ts
│   │   └── package.json
│   │
│   ├── supabase/               # 🗄️ Supabase Client + Types
│   │   ├── src/
│   │   │   ├── client.ts       # Supabase Client Init
│   │   │   ├── types.ts        # Generated Types
│   │   │   └── index.ts
│   │   └── package.json
│   │
│   └── typescript-config/      # ⚙️ Shared TS Configs
│       ├── base.json           # Base Config
│       ├── nextjs.json         # Next.js Config
│       ├── react-native.json   # React Native Config
│       └── package.json
│
├── deploy/                     # 🚀 Deployment Scripts
│   ├── nginx-staging.conf      # Nginx Config mit Auth
│   ├── setup-staging-auth.sh   # Passwort-Setup Script
│   └── STAGING_AUTH.md         # Auth Dokumentation
│
├── turbo.json                  # Turborepo Pipeline
├── package.json                # Root Workspace
├── bun.lock                    # Bun Lockfile
└── .cursorrules                # Diese Datei!
```

---

## 🔧 Tech Stack Übersicht

### Frontend - Web
- **Next.js 15** - React Framework mit SSR/ISR
- **TypeScript** - Type Safety
- **Tailwind CSS 3.4** - Utility-First Styling
- **shadcn/ui** - Accessible UI Components
- **next-intl 3.26** - Mehrsprachigkeit (DE/EN/ES)
- **lucide-react** - Icons

### Frontend - Mobile
- **React Native** - Cross-Platform Mobile
- **Expo** - RN Development Platform
- **Expo Router** - Native Navigation
- **NativeWind** - Tailwind für React Native
- **TypeScript** - Type Safety

### Backend
- **Supabase** - PostgreSQL + Auth + Realtime
- **API:** RESTful über Supabase
- **Database:** PostgreSQL
- **Auth:** Supabase Auth

### DevOps/Build
- **Turborepo** - Monorepo Task Orchestration
- **Bun** - Fast Package Manager + Runtime
- **Nginx** - Reverse Proxy + SSL
- **PM2/Systemd** - Process Management

### Styling System
- **Base Colors:**
  - Primary: `#14B8C4` (Teal)
  - Secondary: `#F4EDE4` (Beige)
  - Accent: `#FF6B6B` (Red)

---

## 🚀 Wichtige Commands

### Root Commands (Turborepo)
```bash
bun install              # Dependencies installieren
bun run dev              # Alle Apps parallel starten (watch mode)
bun run build            # Production Build aller Apps
bun run lint             # ESLint Check
bun run type-check       # TypeScript Check
bun run clean            # Clean Build Artifacts
```

### Web App Specific
```bash
cd apps/web
bun run dev              # Next.js auf Port 3000
bun run build            # Production Build
bun run start            # Standalone Mode
```

### Mobile App Specific
```bash
cd apps/mobile
bun run dev              # Expo Dev Server
bun run build            # EAS Build
```

### Packages
```bash
cd packages/shared
bun run build            # Build shared package
```

---

## 📋 Internationalisierung (i18n)

### Sprachen
- **DE** (Deutsch) - `de.json`
- **EN** (English) - `en.json`  
- **ES** (Español) - `es.json`

### Routing
Die App nutzt **Dynamic Segment** `[lang]`:
```
/de → Deutsch
/en → English
/es → Español
```

### Komponenten-Verwendung
```typescript
import { useTranslations } from 'next-intl';

export default function MyComponent() {
  const t = useTranslations();
  return <h1>{t('home.title')}</h1>;
}
```

### Neue Übersetzungen hinzufügen
1. Edit `packages/shared/src/i18n/de.json` (und en.json, es.json)
2. Format: `{ "section.key": "Wert" }`
3. Commit + Deploy

---

## 🎨 Styling Guidelines

### Tailwind Klassen
- **Responsive:** `md:`, `lg:`, `xl:` Prefixes
- **Dark Mode:** Bereits konfiguriert mit `darkMode: ['class']`
- **Custom Colors:** Definiert in `tailwind.config.ts`

### shadcn/ui Components
- Importieren von `@/components/ui/`
- Beispiel: `Button`, `Input`, `Card`, `Dialog`
- Vollständig typsicher mit TypeScript

### CSS Modules vs Tailwind
- **Bevorzugt:** Tailwind CSS Classes
- **Fallback:** CSS Modules wenn nötig (`.module.css`)
- **Global Styles:** `src/globals.css`

---

## 🔐 Authentifizierung & Datenbank

### Supabase Client
```typescript
import { supabase } from '@repo/supabase';

// Beispiel
const { data, error } = await supabase
  .from('table_name')
  .select('*')
  .eq('id', 1);
```

### Environment Variables
**apps/web/.env.local:**
```env
NEXT_PUBLIC_SUPABASE_URL=https://ayetwgaainiskwqvgubd.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_key_here
```

**apps/mobile/.env.local:**
```env
EXPO_PUBLIC_SUPABASE_URL=https://ayetwgaainiskwqvgubd.supabase.co
EXPO_PUBLIC_SUPABASE_ANON_KEY=your_key_here
```

---

## 📦 Shared Packages

### @repo/shared
- **i18n:** Übersetzungsdateien
- **utils/date.ts:** Datum-Helpers
- **utils/string.ts:** String-Utilities

Import: `import { someUtil } from '@repo/shared';`

### @repo/supabase
- **client.ts:** Initialisierter Supabase Client
- **types.ts:** Auto-Generated Types von DB

Import: `import { supabase } from '@repo/supabase';`

### @repo/typescript-config
- **base.json:** Basis TS Config
- **nextjs.json:** Für Web App
- **react-native.json:** Für Mobile App

---

## 🔀 Shared vs App-Spezifisch: Kritische Regel

### ✅ WAS MUSS IN `@repo/shared` (BEIDE APPS)

**1. Geschäftslogik & Datenverarbeitung:**
- Berechnung von Preisen, Distanzen, Datum-Operationen
- String-Validierung, Parsing, Formatting
- API-Logik (Request/Response Transformation)
- State Management Logik

**2. Types & Interfaces:**
```typescript
// packages/shared/src/types.ts
export interface User {
  id: string;
  name: string;
  email: string;
  avatar_url?: string;
}

export interface Activity {
  id: string;
  title: string;
  category: 'hiking' | 'beach' | 'culture';
  location: { lat: number; lng: number };
}

export interface ApiResponse<T> {
  data: T;
  error?: string;
  timestamp: string;
}
```

**3. Utility Functions:**
```typescript
// packages/shared/src/utils/activityUtils.ts
import { supabase } from '@repo/supabase';
import { Activity } from '../types';

export function formatActivityTitle(activity: Activity): string {
  return activity.title.trim().toUpperCase();
}

export async function fetchActivityById(id: string) {
  const { data, error } = await supabase
    .from('activities')
    .select('*')
    .eq('id', id)
    .single();
  return { data, error };
}

export function calculateDistance(
  lat1: number, 
  lng1: number, 
  lat2: number, 
  lng2: number
): number {
  // Haversine Formula
  const R = 6371;
  const dLat = ((lat2 - lat1) * Math.PI) / 180;
  const dLng = ((lng2 - lng1) * Math.PI) / 180;
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos((lat1 * Math.PI) / 180) *
      Math.cos((lat2 * Math.PI) / 180) *
      Math.sin(dLng / 2) *
      Math.sin(dLng / 2);
  return R * (2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)));
}
```

**4. Internationalisierung (i18n):**
- Alle Translation-Keys in `packages/shared/src/i18n/*.json`
- Gleiche Keys in allen 3 Sprachen (DE, EN, ES)

**5. Constants & Enums:**
```typescript
// packages/shared/src/constants.ts
export const ACTIVITY_CATEGORIES = ['hiking', 'beach', 'culture'] as const;
export const SUPPORTED_LOCALES = ['de', 'en', 'es'] as const;
export const MAX_DESCRIPTION_LENGTH = 500;
```

---

### ❌ WAS GEHÖRT NICHT IN SHARED (APP-SPEZIFISCH)

**1. UI-Komponenten:**
- Web braucht: React Components mit HTML/CSS (shadcn/ui)
- Mobile braucht: React Native Views (NativeWind)
- ❌ NIEMALS UI in `@repo/shared`!

**2. Page/Screen-Level Code:**
- Page.tsx, Layout.tsx (Web)
- App._layout.tsx, Screens (Mobile)
- Diese sind platform-spezifisch

**3. Styling & CSS:**
- Tailwind Klassen (Web)
- NativeWind Klassen (Mobile)
- CSS Modules
- ❌ NIEMALS CSS/Styling in `@repo/shared`!

**4. Navigation/Routing:**
- Web: Next.js File-based Routing
- Mobile: Expo Router Stack Navigator
- ❌ Platform-spezifisch halten!

**5. Platform-APIs:**
- `window`, `document` (Web only)
- `Dimensions`, `Geolocation` (Mobile only)
- Niemals direkt nutzen in shared!

---

## 🏗️ Praktisches Beispiel: Activity Feature (Web + Mobile)

### Schritt 1: Types & Logik in Shared ✅

```typescript
// packages/shared/src/types.ts
export interface Activity {
  id: string;
  title: string;
  description: string;
  category: 'hiking' | 'beach' | 'culture';
  location: { lat: number; lng: number };
  difficulty: 'easy' | 'medium' | 'hard';
  duration_minutes: number;
  rating: number;
  image_url: string;
}
```

```typescript
// packages/shared/src/utils/activityUtils.ts
import { supabase } from '@repo/supabase';
import { Activity } from '../types';

export async function getActivityById(id: string): Promise<Activity | null> {
  const { data, error } = await supabase
    .from('activities')
    .select('*')
    .eq('id', id)
    .single();

  if (error) {
    console.error('Error fetching activity:', error);
    return null;
  }

  return data as Activity;
}

export async function getActivitiesByCategory(
  category: string
): Promise<Activity[]> {
  const { data, error } = await supabase
    .from('activities')
    .select('*')
    .eq('category', category)
    .order('rating', { ascending: false });

  return (data as Activity[]) || [];
}

export function getDifficultyBadgeColor(difficulty: string): string {
  switch (difficulty) {
    case 'easy':
      return 'bg-green-100 text-green-800';
    case 'medium':
      return 'bg-yellow-100 text-yellow-800';
    case 'hard':
      return 'bg-red-100 text-red-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
}

export function formatDuration(minutes: number): string {
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  if (hours === 0) return `${mins}min`;
  if (mins === 0) return `${hours}h`;
  return `${hours}h ${mins}min`;
}
```

```json
// packages/shared/src/i18n/de.json
{
  "activity.title": "Aktivität",
  "activity.difficulty": "Schwierigkeit",
  "activity.duration": "Dauer",
  "activity.rating": "Bewertung",
  "activity.category.hiking": "Wanderung",
  "activity.category.beach": "Strand",
  "activity.category.culture": "Kultur"
}
```

### Schritt 2: Web Component (App-spezifisch) ✅

```typescript
// apps/web/src/components/ActivityCard.tsx
import { Activity } from '@repo/shared';
import { 
  getDifficultyBadgeColor, 
  formatDuration 
} from '@repo/shared';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Star } from 'lucide-react';
import Image from 'next/image';

interface ActivityCardProps {
  activity: Activity;
  onClick?: () => void;
}

export function ActivityCard({ activity, onClick }: ActivityCardProps) {
  return (
    <Card 
      className="overflow-hidden cursor-pointer hover:shadow-lg transition-shadow"
      onClick={onClick}
    >
      <div className="relative h-48 w-full">
        <Image
          src={activity.image_url}
          alt={activity.title}
          fill
          className="object-cover"
        />
      </div>
      
      <div className="p-4">
        <h3 className="font-bold text-lg mb-2">{activity.title}</h3>
        
        <div className="flex gap-2 mb-3">
          <Badge className={getDifficultyBadgeColor(activity.difficulty)}>
            {activity.difficulty}
          </Badge>
          <Badge variant="outline">{formatDuration(activity.duration_minutes)}</Badge>
        </div>

        <div className="flex items-center gap-1">
          <Star className="w-4 h-4 fill-yellow-400" />
          <span className="font-semibold">{activity.rating}</span>
        </div>
      </div>
    </Card>
  );
}
```

```typescript
// apps/web/src/app/[lang]/activities/page.tsx
import { getActivitiesByCategory } from '@repo/shared';
import { ActivityCard } from '@/components/ActivityCard';

export default async function ActivitiesPage() {
  const activities = await getActivitiesByCategory('hiking');

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-6">Hiking Activities</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {activities.map((activity) => (
          <ActivityCard key={activity.id} activity={activity} />
        ))}
      </div>
    </div>
  );
}
```

### Schritt 3: Mobile Screen (App-spezifisch) ✅

```typescript
// apps/mobile/app/activities.tsx
import React, { useEffect, useState } from 'react';
import { View, Text, ScrollView, Image } from 'react-native';
import { 
  Activity,
  getActivitiesByCategory, 
  formatDuration 
} from '@repo/shared';
import { ActivityListItem } from '@/components/ActivityListItem';

export default function ActivitiesScreen() {
  const [activities, setActivities] = useState<Activity[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadActivities();
  }, []);

  async function loadActivities() {
    const data = await getActivitiesByCategory('hiking');
    setActivities(data);
    setLoading(false);
  }

  if (loading) {
    return <View className="flex-1 justify-center items-center"><Text>Loading...</Text></View>;
  }

  return (
    <ScrollView className="flex-1 bg-white p-4">
      <Text className="text-3xl font-bold mb-4">Hiking Activities</Text>
      
      {activities.map((activity) => (
        <ActivityListItem key={activity.id} activity={activity} />
      ))}
    </ScrollView>
  );
}
```

```typescript
// apps/mobile/components/ActivityListItem.tsx
import React from 'react';
import { View, Text, Image, TouchableOpacity } from 'react-native';
import { Activity, formatDuration } from '@repo/shared';
import { useRouter } from 'expo-router';
import { Star } from 'lucide-react-native';

interface ActivityListItemProps {
  activity: Activity;
}

export function ActivityListItem({ activity }: ActivityListItemProps) {
  const router = useRouter();

  return (
    <TouchableOpacity
      className="bg-gray-100 rounded-lg p-3 mb-3"
      onPress={() => router.push(`/activity/${activity.id}`)}
    >
      <Image
        source={{ uri: activity.image_url }}
        className="w-full h-32 rounded-lg mb-2"
      />
      
      <Text className="text-lg font-bold">{activity.title}</Text>
      
      <View className="flex-row gap-2 mt-2">
        <Text className="px-2 py-1 bg-gray-200 rounded text-sm">
          {activity.difficulty}
        </Text>
        <Text className="px-2 py-1 bg-gray-200 rounded text-sm">
          {formatDuration(activity.duration_minutes)}
        </Text>
      </View>

      <View className="flex-row items-center gap-1 mt-2">
        <Star className="w-4 h-4" />
        <Text className="font-semibold">{activity.rating}</Text>
      </View>
    </TouchableOpacity>
  );
}
```

---

## 📋 Checkliste für Feature Development

Wenn du ein neues Feature bauen möchtest:

- [ ] **Types/Interfaces** → `packages/shared/src/types.ts`
- [ ] **Geschäftslogik** → `packages/shared/src/utils/`
- [ ] **Supabase Queries** → `packages/shared/src/utils/`
- [ ] **i18n Keys** → `packages/shared/src/i18n/*.json` (alle 3 Sprachen!)
- [ ] **Web UI Component** → `apps/web/src/components/`
- [ ] **Mobile Native Component** → `apps/mobile/components/`
- [ ] **Web Page/Screen** → `apps/web/src/app/[lang]/...`
- [ ] **Mobile Screen** → `apps/mobile/app/...`
- [ ] **Test both apps:** `bun run type-check && bun run build`

---

## 🚀 Staging Deployment

### Passwortschutz
- **URL:** `https://staging.mallorca-map.com`
- **Username:** `staging`
- **Password:** `9963`
- **Setup:** Siehe `deploy/STAGING_AUTH.md`

### 3-Layer Security
1. **HTTP Basic Auth** (Nginx) - Blockiert 100% ohne Passwort
2. **HTTP Headers** (X-Robots-Tag, Cache-Control)
3. **robots.txt** - Blockiert Bots und Crawler

### Deploy zur Staging
```bash
# 1. Code changes committen
git add .
git commit -m "message"
git push origin main

# 2. SSH zum Server
ssh user@staging.mallorca-map.com

# 3. Pull + Deploy
cd /home/app/mallorca-map-next
git pull origin main
bun install && bun run build
sudo systemctl restart mallorca-map-staging

# 4. Nginx testen
sudo nginx -t && sudo systemctl reload nginx
```

---

## ✅ Code Konventionen

### TypeScript
- **Strict Mode:** Aktiviert in `tsconfig.json`
- **Typ-Annotationen:** Immer für Props und Returns
- **Imports:** Alias `@/` verwenden statt `../../../`

### Component Structure
```typescript
// Imports
import { ReactNode } from 'react';
import { Button } from '@/components/ui/button';

// Types
interface MyComponentProps {
  title: string;
  children?: ReactNode;
}

// Component
export function MyComponent({ title, children }: MyComponentProps) {
  return (
    <div>
      <Button>{title}</Button>
      {children}
    </div>
  );
}
```

### File Naming
- **Components:** PascalCase (`Button.tsx`, `Card.tsx`)
- **Utilities:** camelCase (`dateUtils.ts`, `stringHelpers.ts`)
- **Types:** PascalCase (`User.ts`, `Product.ts`)

### Folder Organization
- Components grouped by feature/area
- Related utils in same folder
- Tests co-located with source files

---

## 🐛 Häufige Probleme & Lösungen

### Turborepo Build Fehler
```bash
# Clear cache
bun run clean

# Rebuild
bun run build
```

### Type Errors nach Änderungen
```bash
bun run type-check
```

### Module not found
- Check imports are using `@/` alias
- Ensure package.json has correct workspace reference
- Run `bun install` in root

### Styling nicht angewendet
- Tailwind content paths in `tailwind.config.ts`
- Check CSS ist in `globals.css` importiert
- Clear `.next` folder: `rm -rf apps/web/.next`

---

## 🎯 Cursor AI Richtlinien

### Wenn du Code debuggen sollst:
1. **Lese zuerst** die relevante Datei komplett
2. **Verstehe** die Komponenten-Hierarchie
3. **Check** den Datenfluss (Props → State → Output)
4. **Teste** deine Lösung mit den Commands oben

### Wenn du neue Features bauen sollst:
1. **Ask:** Sollte es in `apps/web` oder `apps/mobile`?
2. **Check:** Kann Code in `packages/shared` wiederverwendet werden?
3. **TypeScript:** Immer Typen definieren
4. **Test:** Mit `bun run type-check && bun run lint`

### Wenn du Komponenten erstellst:
1. **Use:** shadcn/ui Components als Base
2. **Style:** Mit Tailwind CSS
3. **Accept Props:** Immer typisiert
4. **Export:** Named Export, nicht default

### Wenn du i18n Strings editierst:
1. **Update:** Alle 3 JSON-Dateien (de/en/es)
2. **Format:** Immer `"section.key": "value"`

---

## 🔴 CODE REVIEW & APPROVAL (⭐ KRITISCH!)

**Nur EINE Regel: git push braucht deine Bestätigung!**

### ✅ Claude darf selbst machen:
- Alle Code-Änderungen (intelligent & gut)
- Neue Komponenten erstellen
- Features implementieren
- Lokal testen (`bun run build`, `type-check`, `lint`)
- `git add .` und `git commit` machen
- Tests schreiben & durchführen

### ❌ Claude darf NICHT:
- `git push` machen (NUR du!)
- Deployment triggern
- SSH zum Deployen nutzen

### 🔄 Workflow:

```
STEP 1️⃣: Claude arbeitet
├─ Code ändern (intelligent)
├─ Testen: bun run build ✅
├─ Testen: bun run type-check ✅
├─ Testen: bun run lint ✅
├─ git add . && git commit
└─ "Code ist fertig und getestet!"

STEP 2️⃣: Matthias reviewt (optional)
├─ Schaut Code/Commits an
└─ "Looks good!" oder "Ändere noch X"

STEP 3️⃣: Claude pusht (ABER NUR mit OK!)
├─ Wartet auf "Deploy!" oder "git push"
├─ "Du kannst jetzt git push machen"
└─ Matthias: git push origin main

STEP 4️⃣: GitHub Actions (automatisch)
├─ Deployment läuft
└─ ✅ Live!
```

### 📋 Checkliste vor "Code ist fertig":

- [ ] Code geschrieben
- [ ] `bun run build` erfolgreich ✅
- [ ] `bun run type-check` erfolgreich ✅
- [ ] `bun run lint` erfolgreich ✅
- [ ] Git commits sauber
- [ ] "Code ist fertig & getestet!"

### 📋 Checkliste vor git push:

- [ ] Habe ich "Deploy!" oder "git push OK" gehört?
- [ ] Erst DANN: "Du kannst jetzt git push machen"
- [ ] NICHT selbst pushen! (NUR User!)

---

## 🔴 DEPLOYMENT RULE (⭐ ABSOLUTE RULE!)

**Nur User (Matthias) darf git push machen!**
Das Deployment geht SOFORT LIVE nach Push!

---

## 📚 Deployment Dokumentation

- **`DEPLOYMENT.md`** - Vollständige Deployment-Anleitung
- **`.github/workflows/deploy-staging.yml`** - GitHub Actions Config
- **`deploy/SSH_SETUP.md`** - SSH für Notfälle
- **`README.md`** - Quick Deploy Flow